parameters:
- name: forceRelease
  type: boolean
  default: false

trigger:
  - main

pr:
  - main

pool:
  vmImage: windows-latest

steps:
- pwsh: |
    Install-Module PowerShellGet -RequiredVersion '3.0.17-beta17' -AllowPrerelease -Force
  displayName: install PowerShellGet v3
- pwsh: |
    $dir = New-Item $(Agent.TempDirectory)\LocalRepo -ItemType directory
    Register-PSResourceRepository LocalRepo -Uri $dir -Trusted
  displayName: register local powershell repository
- pwsh: .\Build.ps1
  displayName: build module
- pwsh: Publish-PSResource -Path .\output -Repository LocalRepo
  displayName: publish module to local repository
- pwsh: Install-PSResource AzPipelineVariable -Repository LocalRepo -Prerelease -Verbose
  displayName: install module from local repo
- pwsh: |
    Import-Module AzPipelineVariable
    Invoke-Pester -Configuration (New-PesterConfiguration @{
      TestResult = @{
        Enabled = $true
        OutputFormat = 'NUnitXml'
        OutputPath = 'unitTestResults.xml'
      }
      Run = @{
        Container = New-PesterContainer `
          -Path 'AzPipelineVariable.Tests.ps1' `
          -Data @{ SkipImport = $true }
      }
    })
- task: PublishTestResults@2
  displayName: publish test results
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: unitTestResults.xml
    testResultsFormat: NUnit
    testRunTitle: Unit Tests
- pwsh: |
    Set-AzPipelineVariable normalVar xyz
    Set-AzPipelineVariable outputVar xyz -Output
    # "secret" is a resevered prefix
    Set-AzPipelineVariable aSecretVar1 xyz -Secret
    Set-AzPipelineVariable aSecretVar2 xyz -Secret
    Set-AzPipelineVariable mutableVar xyz -Mutable
    Set-AzPipelineVariable emptyVar $null
  displayName: set variables for smoke test
  name: setVars
- pwsh: Set-AzPipelineVariable mutableVar 'mutated'
  displayName: mutate var
- pwsh: |
    Import-Module AzPipelineVariable
    
    Invoke-Pester -Configuration (New-PesterConfiguration @{
      TestResult = @{
        Enabled = $true
        OutputFormat = 'NUnitXml'
        OutputPath = 'integrationTestResults.xml'
      }
      Run = @{
        Container = New-PesterContainer `
        -ScriptBlock {
          Describe 'Set-AzPipelineVariable' {
            It 'normal var' {
              '$(normalVar)' | Should -Be 'xyz'
            }
            It 'output var' {
              '$(setVars.outputVar)' | Should -Be 'xyz'
            }
            It 'mapped secret var' {
              $ENV:ASECRETVAR1 | Should -Be 'xyz'
            }
            It 'unmapped secret var' {
              $ENV:ASECRETVAR2 | Should -Be $null
            }
            It 'mutable var' {
              '$(mutableVar)' | Should -Be 'mutated'
            }
            It 'empty var' {
              '$(emptyVar)' | Should -Be ''
            }
          }
        }
      }
    })
  displayName: run integration test
  env:
    ASECRETVAR1: $(aSecretVar1)
- task: PublishTestResults@2
  displayName: publish test results
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: integrationTestResults.xml
    testResultsFormat: NUnit
    testRunTitle: Integration Tests
- pwsh: |
    Publish-PSResource -Path .\output -Repository PSGallery -ApiKey $Env:API_KEY -Verbose
  condition: and(succeeded(), eq('${{ parameters.forceRelease }}', 'true'))
  env:
    API_KEY: $(PSGalleryApiKey)